Производительность
См. также: en:Java performance
В первых версиях Java (до того, как HotSpot был реализован в Java 1.3 в 2000 году) было много критики по поводу низкой производительности. Java продемонстрировала работу на скорости, сравнимой с оптимизированным машинным кодом, а современные реализации виртуальной машины Java в тестах на производительность регулярно показывают одни из лучших результатов среди доступных языковых платформ — обычно в пределах 3 позиций по отношению к Си/C++.[10]

Производительность Java существенно улучшилась в новых версиях по сравнению с ранними.[11] Производительность JIT-компиляторов по сравнению с универсальными компиляторами в некоторых искусственных специально подобранных тестах оказалась сравнимой.[11][12][13]

Байт-код Java может быть либо интерпретирован во время выполнения виртуальной машиной, либо он может быть скомпилирован во время загрузки программы или во время её выполнения в машинный код, который работает непосредственно на компьютере. Интерпретация происходит медленнее, чем выполнение машинного кода, а компиляция во время загрузки программы или во время её выполнения снижает производительность за счёт затрат времени на компиляцию. Современные производительные реализации виртуальной Java-машины используют компиляцию, поэтому (после срабатывания JIT-компиляции) приложение показывает производительность, близкую к платформенно-ориентированному коду.

Безопасность
В 2010 году значительно увеличилось количество эксплойтов для обхода ограничений песочницы JVM в браузерах, в результате чего Java стала более атакуемой, чем Acrobat и Flash.[14]

Критики полагают, что обновлённые версии JVM не используются, поскольку многие пользователи просто не знают о том, что у них на компьютере установлена JVM, и поскольку многие пользователи не знают, как обновить JVM. Что же касается корпоративных компьютеров, то многие компании ограничивают права пользователей на установку программного обеспечения и слишком медленно устанавливают обновления.[14][15]

В последних версиях JVM есть опции доступности Java в браузерах.

См. также
Сравнение C# и Java
Примечания
 Generics in Java
. Object Computing, Inc.. Проверено 9 декабря 2006. Архивировано
 3 сентября 2012 года.
 What's Wrong With Java: Type Erasure
 (6 декабря 2006). Проверено 9 декабря 2006. Архивировано
 3 сентября 2012 года.
 Type Erasure
. Архивировано
 3 сентября 2012 года.
 Types, Values and Variables
, Java Languaege Specification, 2-nd ed.
 Java libraries should provide support for unsigned integer arithmetic
. Bug Database, Sun Developer Network. Oracle. Проверено 18 января 2011. Архивировано
 3 сентября 2012 года.
 Owen, Sean R. Java and unsigned integers Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)
 (5 ноября 2009). Проверено 9 октября 2010.
 Kahan, W.; Joseph D. Darcy. How Java's Floating-Point Hurts Everyone Everywhere
 (PDF) (1 марта 1998). Проверено 9 декабря 2006. Архивировано
 3 сентября 2012 года.
 Types, Values, and Variables
. Sun Microsystems. Проверено 9 декабря 2006. Архивировано
 3 сентября 2012 года.
 Java theory and practice: Where's your point? Tricks and traps with floating point and decimal numbers
. IBM (2003-1-1). Проверено 19 ноября 2011. Архивировано
3 сентября 2012 года.
 Computer Language Benchmarks Game: Java vs Gnu C++
. Debian.org. Проверено 19 ноября 2011. Архивировано
 3 сентября 2012 года.
 J.P.Lewis and Ulrich Neumann. Performance of Java versus C++
. Graphics and Immersive Technology Lab, Университет Южной Калифорнии. Архивировано
 3 мая 2012 года.
 The Java is Faster than C++ and C++ Sucks Unbiased Benchmark
 FreeTTS — A Performance Case Study
 Архивировано
 25 марта 2009 года., Willie Walker, Paul Lamere, Philip Kwok
 Researchers Highlight Recent Uptick in Java Security Exploits
. Архивировано
 3 сентября 2012 года.
 Have you checked the Java?
. Архивировано
 3 сентября 2012 года.
Ссылки